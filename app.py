from fastapi import FastAPI, HTTPException
import openai
import requests
import json
import os
from notion_client import Client
import pandas as pd
from google.oauth2 import service_account
from googleapiclient.discovery import build
from pydantic import BaseModel

# üîπ Cl√©s API (via variables d'environnement)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
DATABASE_ID = "1b1d9062c346806b9753f5430bced77f"
SPREADSHEET_ID = "1NdKKbrvl10vZ1lwXYAUYlhhTTJq8wiedJzsE0-6F8I4"

# üîπ V√©rifier si les cl√©s sont bien charg√©es
if not OPENAI_API_KEY:
    raise ValueError("‚ùå ERREUR : La cl√© OPENAI_API_KEY est manquante")
if not NOTION_API_KEY:
    raise ValueError("‚ùå ERREUR : La cl√© NOTION_API_KEY est manquante")

# üîπ D√©finition des SCOPES Google API
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# üîπ Chargement des Credentials Google Sheets
credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if credentials_json:
    creds_dict = json.loads(credentials_json)
    creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
else:
    raise ValueError("‚ùå ERREUR : Les identifiants Google Sheets ne sont pas d√©finis.")

# üîπ Initialisation FastAPI
app = FastAPI()

# üîπ V√©rification si l'API fonctionne
@app.get("/")
def read_root():
    return {"message": "‚úÖ API FastAPI en ligne üöÄ"}

# üîπ Connexion Notion
notion = Client(auth=NOTION_API_KEY)

# üîπ Connexion Google API Services (Sheets + Drive)
sheets_service = build("sheets", "v4", credentials=creds)
drive_service = build("drive", "v3", credentials=creds)

# üîπ Configuration API OpenAI
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# ===================== ‚úÖ OPENAI GPT-4 ===================== #
class GPTRequest(BaseModel):
    prompt: str

@app.post("/gpt/generate")
def generate_content(request: GPTRequest):
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": request.prompt}]
        )
        return {"generated_text": response.choices[0].message.content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur OpenAI: {str(e)}")

# ===================== ‚úÖ NOTION : Ajouter du contenu ===================== #
class UpdateNotionRequest(BaseModel):
    page_id: str
    prompt: str

@app.post("/gpt/generate_to_notion", operation_id="generate_notion_content")
def generate_and_update_notion(request: UpdateNotionRequest):
    """
    G√©n√®re du texte avec GPT-4 et l'ajoute √† une page Notion.
    """
    try:
        # üîπ G√©n√©rer du texte avec GPT-4
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": request.prompt}]
        )
        generated_text = response.choices[0].message.content

        # üîπ Construire la requ√™te POST pour ajouter un bloc de texte
        url = f"https://api.notion.com/v1/blocks/{request.page_id}/children"
        headers = {
            "Authorization": f"Bearer {NOTION_API_KEY}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        data = {
            "children": [
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": generated_text
                                }
                            }
                        ]
                    }
                }
            ]
        }

        # üîπ DEBUG : Voir la requ√™te envoy√©e √† Notion
        print("üîç Requ√™te envoy√©e √† Notion:", json.dumps(data, indent=4))

        # üîπ Envoyer la requ√™te POST √† Notion
        notion_response = requests.post(url, headers=headers, json=data)

        # üîπ DEBUG : Voir la r√©ponse de Notion
        print("üîç R√©ponse Notion:", notion_response.json())

        if notion_response.status_code == 200:
            return {"message": "‚úÖ Texte ajout√© √† Notion", "content": generated_text}
        else:
            raise HTTPException(status_code=notion_response.status_code, detail=notion_response.json())

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‚ùå Erreur : {str(e)}")

# ===================== ‚úÖ GOOGLE SHEETS ===================== #
@app.get("/sheets/{sheet_name}")
def get_google_sheet(sheet_name: str):
    try:
        result = sheets_service.spreadsheets().values().get(spreadsheetId=SPREADSHEET_ID, range=sheet_name).execute()
        values = result.get("values", [])
        return {"data": values if values else "Aucune donn√©e trouv√©e"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur Google Sheets: {str(e)}")

@app.post("/sheets/update/{sheet_name}/{cell}")
def update_google_sheet(sheet_name: str, cell: str, new_value: str):
    body = {"values": [[new_value]]}
    try:
        sheets_service.spreadsheets().values().update(
            spreadsheetId=SPREADSHEET_ID,
            range=f"{sheet_name}!{cell}",
            valueInputOption="RAW",
            body=body,
        ).execute()
        return {"message": f"‚úÖ Cellule {cell} de {sheet_name} mise √† jour avec {new_value}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur Google Sheets: {str(e)}")
import logging

logging.basicConfig(level=logging.DEBUG)

@app.post("/gpt/generate_to_notion", operation_id="generate_notion_content")
def generate_and_update_notion(request: UpdateNotionRequest):
    """
    G√©n√®re du texte avec GPT-4 et l'ajoute √† une page Notion.
    """
    try:
        # G√©n√©rer du texte avec GPT-4
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": request.prompt}]
        )
        generated_text = response.choices[0].message.content

        # Construire la requ√™te pour Notion
        url = f"https://api.notion.com/v1/blocks/{request.page_id}/children"
        headers = {
            "Authorization": f"Bearer {NOTION_API_KEY}",
            "Notion-Version": "2022-06-28",
            "Content-Type": "application/json"
        }
        data = {
            "children": [
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [
                            {
                                "type": "text",
                                "text": {
                                    "content": generated_text
                                }
                            }
                        ]
                    }
                }
            ]
        }

        # Debugging : Voir les logs
        logging.debug("üìå ENVOI √Ä NOTION...")
        logging.debug(f"‚û°Ô∏è URL: {url}")
        logging.debug(f"‚û°Ô∏è Headers: {headers}")
        logging.debug(f"‚û°Ô∏è Payload: {json.dumps(data, indent=4)}")

        # Envoyer la requ√™te POST √† Notion
        notion_response = requests.post(url, headers=headers, json=data)

        # Debugging : Voir la r√©ponse de Notion
        logging.debug("üìå R√âPONSE NOTION:")
        logging.debug(notion_response.json())

        if notion_response.status_code == 200:
            return {"message": "‚úÖ Texte ajout√© √† Notion", "content": generated_text}
        else:
            logging.error(f"‚ùå Erreur Notion {notion_response.status_code}: {notion_response.json()}")
            raise HTTPException(status_code=notion_response.status_code, detail=notion_response.json())

    except Exception as e:
        logging.error(f"‚ùå ERREUR : {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erreur : {str(e)}")
